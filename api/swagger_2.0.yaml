swagger: "2.0"
info:
  description: "API для интернет-магазина, в котором администраторы смогут логиниться через специальную форму и добавлять/удалять товары из каталога, а пользователи смогут фильтровать товары по цене и категории, а также создавать заказы на несколько товаров."
  version: "1.0.0"
  title: "Shop"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "mylocalhost.local"
basePath: "/"
tags:

- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
    
- name: "item"
  description: "Operations about item"  

- name: "store"
  description: "Access to itemstore orders"

schemes:
- "https"
- "http"

paths:
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters: 
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            
        "400":
          description: "Invalid username/password supplied"
          
  /user/logout:
    post:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      
  
  /Items:
    post:
      tags:
      - "Item"
      summary: "Add a new item to the store"
      description: "Item object that needs to be added to the store"
      operationId: "CreateItem"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Item object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Item"
      responses:
        "405":
          description: "Invalid input"
      security:
      - api_key: []
      
  /items/upload_image:
    post:
      tags:
      - "Item"
      summary: "uploads an image"
      description: "Additional data to pass to server"
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: true
        type: "string"
      - name: "file"
        type: "integer"
        format: "int64"
        schema:
          $ref: "#/definitions/Item"
      requestBody:
        content:
          application/json:
            schema:
              properties:
              - name:
                type: "string"
                description: "Updated name of the item"
              status:
                type: "string"
                description: "Updated status of the item"
      responses:
        "405":
          description: "Invalid input"
          content: {}
      security:
      - api_key: []
      
    delete:
      tags:
      - "Item"
      summary: "Deletes a item"
      operationId: "DeleteItem"
      parameters:
        - name: "itemId"
          in: "path"
          description: "Item id to delete"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
          content: {}
        "404":
          description: "Item not found"
          content: {}
      security:
      - api_key: []
        
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
      
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
          
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10.0
        minimum: 1.0
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    
definitions:

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      
  Item:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Телевизор 55' Sony"
      description:
        type: "string"
      price:
        type: "integer"
        format: "int64"
      image_link:
        type: "string"

  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
      
      
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  

  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
        
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
openapi: 3.0.1
info:
  version: 1.0.0
  title: Shop
  description: API для интернет-магазина, в котором администраторы смогут логиниться через специальную форму и добавлять/удалять товары из каталога, а пользователи смогут фильтровать товары по цене и категории, а также создавать заказы на несколько товаров.
  contact:
    name: send to email
    email: a.y.ivlev@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
    
tags:

- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://mylocalhost.local
    
- name: item
  description: Operations about item
  externalDocs:
    description: Find out more about our store
    url: http://mylocalhost.local
    
- name: order
  description: Access to item store orders
  externalDocs:
    description: Find out more about our store
    url: http://mylocalhost.local
    

paths:
  /user/login:
    post:
      tags:
      - user
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
          
  /user/logout:
    post:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  
  /item:        
    post:
      tags:
      - item
      summary: Add a new item to the store
      operationId: CreateItem
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        200:
          description: successful create item
          content: {}
        405:
          description: Invalid input
      security:
        - api_key: []
      
    get:
      tags:
      - item
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: {}
      
  /item/{itemId}:
    get:
      tags:
      - item
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
          
    put:
      tags:
      - item
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                description:
                  type: string
                  description: Updated status of the item
                price:
                  type: integer
                  format: int64
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - api_key: []
      
    delete:
      tags:
      - item
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
        - api_key: []
      
  /item/{itemId}/upload_image:
    post:
      tags:
      - item
      summary: "uploads an image"
      operationId: "uploadFile"
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Additional data to pass to server
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: "string"
                fileName:
                  type: string
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Item'
      security:
        - api_key: []   

  /order:        
    post:
      tags:
      - order
      summary: "Place an order for a item"
      operationId: CreateOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        400:
          description: "Invalid Order"
      security:
        - api_key: []
          
    get:
      tags:
      - order
      summary: Lists Order with filters
      operationId: ListOrder
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        400:
          description: Invalid order range
          content: {}
      security:
        - api_key: []  
          
  /order/{orderId}:
    get:
      tags:
      - order
      summary: Find order by Name
      operationId: GetOrder
      parameters:
      - name: orderId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
      security:
        - api_key: []  
      
    put:
      tags:
      - order
      summary: Updates a order in the store with form data
      operationId: UpdateOrder
      parameters:
      - name: orderId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                itemID:
                  type: integer
                  format: int64
                  description: Updated item of the order
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - api_key: []
      
    delete:
      tags:
      - order
      summary: Deletes a order
      operationId: DeleteOrder
      parameters:
      - name: orderId
        in: path
        description: Item id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
        - api_key: []      
          
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        password:
          type: string
          
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
          
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userID:
          type: integer
          format: int64
        itemID:
          type: integer
          format: int64
        orderPrice:
          type: integer
          format: int64
          
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
